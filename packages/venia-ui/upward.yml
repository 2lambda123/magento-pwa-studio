# This is a top-level object used to set values for the root `status`,
# `headers`, and `body` properties.
# It is the first branch in an abstract decision tree, which ultimately
# resolves to an object that contains values for its own 'status', 'headers',
# and 'body' properties.
# This object uses a ConditionalResolver to determine the object value based
# on the URL pattern in the request object.
veniaResponse:
  when:
    # Requests to graphql/rest endpoints, the media library, and cache are
    # handled by the top-level 'veniaProxy' object, which is a ProxyResolver
    # that passes the request through to the backing Magento server.
    - matches: request.url.pathname
      pattern: '^/(graphql|rest)(/|$)'
      use: veniaProxy
    # Requests to create an account are handled by the 'veniaAppShell' object.
    - matches: request.url.pathname
      pattern: '^/create-account'
      use: veniaAppShell
    # Requests for static resources provided by the application project, such
    # as icons, manifests, and static images, are handled by the top-level
    # 'veniaStatic' object, which defines a DirectoryResolver that serves assets
    # from the './static' folder in the project.
    - matches: request.url.pathname
      pattern: '^/(icons/.+|favicon.ico$|manifest.json$|.+\\.(png|svg)|robots.txt$)'
      use: veniaStatic
    # Requests with a URL key are handled by the top-level 'veniaAppShell'
    # object.
    # The existence of a URL key is determined using the top-level
    # 'veniaUrlKey' object.
    - matches: veniaUrlKey
      pattern: '.'
      use: veniaAppShell
    # Requests to the document root, i.e. having no URL key, is also handled
    # by the top-level 'veniaAppShell' object.
    - matches: request.url.pathname
      pattern: '^/$'
      use: veniaAppShell
  # If the none of the tested conditions pass, the default handler for the
  # request is the top-level 'veniaBundles' object, which is a
  # DirectoryResolver that serves the Webpack output assets from the './dist'
  # folder.
  default: veniaBundles

# A ProxyResolver object that passes a request to the backend Magento
# server defined in the MAGENTO_BACKEND_URL environment variable.
# An UPWARD server infers this object as a ProxyResolver due to the presence
# of the 'target' property.
veniaProxy:
  target: env.MAGENTO_BACKEND_URL
  # A local Magento install may have SSH configured and untrusted,
  # which is not a major concern, especially if containerized.
  ignoreSSLErrors:
    inline: true

# The veniaAppShell object resolves to a response that returns server-side
# rendered HTML containing the PWA application shell.
# For SEO purposes, the appropriate meta tags in the HTML head element are also
# set based on information about the resource.
# This object uses properties in the top-level 'veniaResource' object to return
# the appropriate response values.
veniaAppShell:
  inline:
    status:
      when:
        # To test this clause, the ConditionalResolver must evaluate the
        # top-level `veniaResource` object.
        # UPWARD is lazily evaluated, so if this is the first time
        # `veniaResource` was looked up during the request, then this `matches`
        # clause will trigger `veniaResource` to begin resolving.
        # When `veniaResource` is resolved, it will have a model property.
        # This ConditionalResolver checks for the presence of this property.
        # If the property is not present, the requested resource could not be
        # found and a 404 HTTP status is returned.
        - matches: veniaResource.model
          pattern: '.'
          use: 200
      default: 404
    headers:
      inline:
        # The veniaAppShell object will always resolve to a response containing
        # 'text/html' content.
        content-type: 'text/html'
    body:
      # The body property of an veniaAppShell object is resolved using a
      # TemplateResolver.
      # When the top-level 'veniaResource' object resolves, it will contain
      # information on which template file to use for the resource model type.
      engine: mustache
      template: veniaResource.template
      # The TemplateResolver provides the following objects to the template
      # context during render.
      # See the definition for each of the listed top-level object for details
      # on the data each one provides.
      provide:
        model: veniaResource.model
        name: veniaResource.name
        entityTypeName: veniaResource.entityTypeName
        assets: veniaAssetManifest
        urlResolver: veniaUrlResolver
        env: env
        mediaBackendURL: mediaBackendURL
        site:
          inline:
            name:
              inline: Venia

# The veniaResource object provides information about the page type and which
# template to use for a requested resource.
# It uses a ConditionalResolver on the top-level 'veniaUrlResolver' object to
# determine its 'model' and 'template' properties.
# See the definition of the 'veniaUrlResolver' object for details on how it
# determines the page type based on the request URL.
veniaResource:
  when:
    # This entry makes '/search.html' a valid resource path. It uses a simple
    # inline object as its resolve data and uses the generic shell as its
    # template file.
    - matches: request.url.pathname
      pattern: '/search.html'
      use:
        inline:
          entityTypeName:
            inline: "Search Results"
          template: './templates/generic-shell.mst'
    # This entry makes '/create-account' a valid resource path.
    - matches: request.url.pathname
      pattern: '/create-account'
      use:
        inline:
          model: veniaCreateAccountModel
          name: veniaCreateAccountModel.title
          entityTypeName:
            inline: "Create Account Page"
          template: './templates/generic-shell.mst'
    # As with all other context values, `veniaUrlResolver` begins resolving the
    # first time its value is requested.
    # If UPWARD has not yet queried the GraphQL service before evaluating this
    # match clause, then it does so now.
    - matches: veniaUrlResolver.type
      pattern: 'CMS_PAGE'
      use:
        inline:
          # See the top-level 'veniaCmsPage' object for details on its resolved
          # data
          model: veniaCmsPage
          name: veniaCmsPage.title
          entityTypeName:
            inline: "Page"
          template: './templates/cmspage-shell.mst'
    - matches: veniaUrlResolver.type
      pattern: 'CATEGORY'
      use:
        inline:
          # See the top-level 'veniaCategory' object for details on its
          # resolved data
          model: veniaCategory
          name: veniaCategory.name
          entityTypeName:
            inline: "Category"
          template: './templates/category-shell.mst'
    - matches: veniaUrlResolver.type
      pattern: 'PRODUCT'
      use:
        inline:
          # See the top-level 'veniaProduct' object for details on its resolved
          # data
          model: veniaProduct
          name: veniaProduct.name
          entityTypeName:
            inline: "Product Details"
          template: './templates/product-shell.mst'
    # CMS_PAGE, CATEGORY, and PRODUCT are known page types with specific
    # data models and template files for each type.
    # The following condition handles the case where the veniaUrlResolver object
    # contains an unknown page type.
    # It uses the top-level 'veniaUnknownPageType' object as its resolved data
    # and a generic shell as the template file.
    - matches: veniaUrlResolver.type
      pattern: '.'
      use:
        inline:
          model: veniaUnknownPageType
          name: veniaUnknownPageType.title
          entityTypeName:
            inline: "Page"
          template: './templates/generic-shell.mst'
  default:
    # If none of the resolver conditions pass, no 'model' property is set and
    # this resource object sets the template property to the notfound-shell
    # template file.
    inline:
      template: './templates/notfound-shell.mst'

# The veniaAssetManifest object is a FileResolver that returns JSON data from a
# file generated by Webpack. This file contains a list of all the "bundle"
# and "chunk" filenames generated by the last Webpack build. Using this data,
# the templates can render dynamic script tags based on the filenames of the
# most recent build assets.
#
# NOTE: This object uses the shorthand syntax for a FileResolver to help with
# readability and as a convenience.
veniaAssetManifest: ./asset-manifest.json

# The veniaUnknownPageType object contains a single 'title' property that is
# used in the template file as the page title.
# The top-level 'veniaResource' object uses this object as the model data for
# page types it does not support.
veniaUnknownPageType:
  inline:
    title: 'Unknown page type'

# The veniaUrlResolver object is an object containing only the relevant
# data from the top-level 'veniaUrlResolverResult' object, which is a
# ServiceResolver.
#
# NOTE: Extracting smaller objects from large or deeply nesting data objects
# is a pattern used to enhance readability and avoid long "dot lookup" strings
veniaUrlResolver: veniaUrlResolverResult.data.urlResolver

# The veniaUrlResolverResult object is a ServiceResolver that returns data from
# a GraphQL backing service, whose URL is resolved in the top-level
# 'magentoGQL' object.
#
# This object retrieves information from Magento about the request path,
# so the PWA can respect redirects and routes controlled by the admin.
#
# NOTE: The UPWARD server is able to interpret this entry as a ServiceResolver
# because of the presence of the 'query' property, which itself uses the
# shorthand syntax for a FileResolver.
veniaUrlResolverResult:
  url: magentoGQL
  query: './lib/queries/urlResolver.graphql'
  variables:
    inline:
      urlKey: request.url.pathname

# Extract base media URL from ServiceResolver result
mediaBackendURL: mediaBackendResult.data.storeConfig.secure_base_media_url

# Retrieve base media URL with ServiceResolver query
mediaBackendResult:
  url: magentoGQL
  query:
    inline: 'query { storeConfig { secure_base_media_url } }'

# The magentoGQL object is a UrlResolver that returns the URL for the
# GraphQL endpoint using the MAGENTO_BACKEND_URL environment variable.
magentoGQL:
  baseUrl: env.MAGENTO_BACKEND_URL
  pathname:
    inline: graphql

# The veniaProduct object is an object containing only the relevant data from
# the top-level 'veniaProductResult' object.
veniaProduct: veniaProductResult.data.productDetail.items.0

# The veniaProductResult object is a ServiceResolver that returns data from a
# GraphQL backing service, whose URL is resolved in the top-level 'magentoGQL'
# object.
#
# This object retrieves information about a specific product.
veniaProductResult:
  url: magentoGQL
  query: './lib/queries/getProductDetail.graphql'
  variables:
    inline:
      onServer: true
      urlKey: veniaUrlKey
      id: veniaUrlResolver.id

# The veniaCategory object is an object containing only the relevant data from
# the top-level 'veniaCategoryResult' object.
veniaCategory: veniaCategoryResult.data.category

# The veniaCategoryResult object is a ServiceResolver that returns data from a
# GraphQL backing service, whose URL is resolved in the top-level 'magentoGQL'
# object.
#
# This object retrieves information about a specific category.
veniaCategoryResult:
  url: magentoGQL
  query: './lib/queries/getCategory.graphql'
  variables:
    inline:
      onServer: true
      id: veniaUrlResolver.id
      pageSize:
        inline: 1
      currentPage:
        inline: 1

# The veniaCmsPage object is an object containing only the relevant data from
# the top-level 'veniaCmsPageResult' object.
veniaCmsPage: veniaCmsPageResult.data.cmsPage

# The veniaCmsPageResult object is a ServiceResolver that returns data from a
# GraphQL backing service, whose URL is resolved in the top-level 'magentoGQL'
# object.
#
# This object retrieves information about a specific CMS page.
veniaCmsPageResult:
  url: magentoGQL
  query: './lib/queries/getCmsPage.graphql'
  variables:
    inline:
      onServer: true
      id: veniaUrlResolver.id

# The veniaUrlKey object returns the value of the URL key from the request path
veniaUrlKey:
  when:
    - matches: request.url.pathname
      pattern: '^/(?:(.*)\.html)?'
      use: $match.$1
  default:
    inline: ''

# The veniaBundles object is a DirectoryResolver that allows access to the
# bundled files in the project's './dist' diretory.
#
# NOTE: The UPWARD server is able to interpret this entry as a
# DirectoryResolver because of the presence of the 'directory' property.
veniaBundles:
  directory:
    inline: '.'

# The veniaCreateAccountModel object contains a single 'title' property that is
# used in the template file as the page title.
veniaCreateAccountModel:
  inline:
    title:
      inline: 'Create Account'

# The veniaStatic object is a DirectoryResolver that allows access to the files
# inside the project's './static' directory.
veniaStatic:
  directory:
    inline: './static'

# This is a no-op at runtime; nothing refers to this context value in the rest
# of this file. It exists to declare that template evaluation requires _all_
# files in `./templates`, not just the ones detected by mention in this file.
# This is the only way that the UpwardIncludePlugin dependency detector can
# know about the _template partials_, which are only used inside template
# evaluation and cannot be easily statically analyzed by the plugin.
#
# TLDR: mentioning './templates' makes Webpack copy the whole dir into ./dist
veniaTemplateIncludes: './templates'
